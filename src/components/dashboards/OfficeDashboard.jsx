import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button.jsx'

const OfficeDashboard = ({ user }) => {
  const [rides, setRides] = useState([])
  const [drivers, setDrivers] = useState([])
  const [stats, setStats] = useState({
    pendingRequests: 0,
    activeRides: 0,
    availableDrivers: 0,
    completedToday: 0
  })

  // Mock data for demonstration
  useEffect(() => {
    setRides([
      {
        id: 1,
        patientName: '‡∏ô‡∏≤‡∏¢ ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
        requester: '‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏µ',
        pickup: '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 123 ‡∏´‡∏°‡∏π‡πà 5',
        destination: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏µ',
        appointmentTime: '2025-09-26T10:00:00',
        status: 'PENDING',
        priority: 'HIGH'
      },
      {
        id: 2,
        patientName: '‡∏ô‡∏≤‡∏á ‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏î‡∏µ',
        requester: '‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏µ',
        pickup: '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 456 ‡∏´‡∏°‡∏π‡πà 3',
        destination: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£',
        appointmentTime: '2025-09-26T14:30:00',
        status: 'ASSIGNED',
        priority: 'MEDIUM',
        driverName: '‡∏ô‡∏≤‡∏¢ ‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏Ç‡∏±‡∏ö‡∏î‡∏µ'
      }
    ])

    setDrivers([
      {
        id: 1,
        name: '‡∏ô‡∏≤‡∏¢ ‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏Ç‡∏±‡∏ö‡∏î‡∏µ',
        phone: '081-111-2222',
        status: 'BUSY',
        currentLocation: '‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏µ',
        rating: 4.8
      },
      {
        id: 2,
        name: '‡∏ô‡∏≤‡∏¢ ‡∏™‡∏°‡∏õ‡∏≠‡∏á ‡∏Ç‡∏±‡∏ö‡πÄ‡∏Å‡πà‡∏á',
        phone: '082-333-4444',
        status: 'AVAILABLE',
        currentLocation: '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£',
        rating: 4.9
      },
      {
        id: 3,
        name: '‡∏ô‡∏≤‡∏á ‡∏™‡∏°‡πÉ‡∏™ ‡∏Ç‡∏±‡∏ö‡∏î‡∏µ',
        phone: '083-555-6666',
        status: 'AVAILABLE',
        currentLocation: '‡∏ö‡∏≤‡∏á‡∏ô‡∏≤',
        rating: 4.7
      }
    ])

    setStats({
      pendingRequests: 1,
      activeRides: 1,
      availableDrivers: 2,
      completedToday: 5
    })
  }, [])

  const handleAssignDriver = (rideId, driverId) => {
    const driver = drivers.find(d => d.id === driverId)
    setRides(rides.map(ride => 
      ride.id === rideId 
        ? { ...ride, status: 'ASSIGNED', driverName: driver.name }
        : ride
    ))
    setDrivers(drivers.map(driver => 
      driver.id === driverId 
        ? { ...driver, status: 'BUSY' }
        : driver
    ))
  }

  const getStatusColor = (status) => {
    switch (status) {
      case 'PENDING': return 'bg-red-100 text-red-800'
      case 'ASSIGNED': return 'bg-blue-100 text-blue-800'
      case 'IN_PROGRESS': return 'bg-purple-100 text-purple-800'
      case 'COMPLETED': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getStatusText = (status) => {
    switch (status) {
      case 'PENDING': return '‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏£‡∏ñ'
      case 'ASSIGNED': return '‡∏à‡∏±‡∏î‡∏£‡∏ñ‡πÅ‡∏•‡πâ‡∏ß'
      case 'IN_PROGRESS': return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á'
      case 'COMPLETED': return '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'
      default: return status
    }
  }

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'HIGH': return 'bg-red-100 text-red-800'
      case 'MEDIUM': return 'bg-yellow-100 text-yellow-800'
      case 'LOW': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getPriorityText = (priority) => {
    switch (priority) {
      case 'HIGH': return '‡∏î‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å'
      case 'MEDIUM': return '‡∏õ‡∏Å‡∏ï‡∏¥'
      case 'LOW': return '‡πÑ‡∏°‡πà‡∏î‡πà‡∏ß‡∏ô'
      default: return priority
    }
  }

  const getDriverStatusColor = (status) => {
    switch (status) {
      case 'AVAILABLE': return 'bg-green-100 text-green-800'
      case 'BUSY': return 'bg-red-100 text-red-800'
      case 'OFFLINE': return 'bg-gray-100 text-gray-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getDriverStatusText = (status) => {
    switch (status) {
      case 'AVAILABLE': return '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô'
      case 'BUSY': return '‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á'
      case 'OFFLINE': return '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'
      default: return status
    }
  }

  return (
    <div className="space-y-6">
      {/* Welcome Section */}
      <div className="bg-white rounded-lg shadow p-6">
        <h1 className="text-2xl font-bold text-gray-900">
          ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {user.name}
        </h1>
        <p className="text-gray-600 mt-1">
          ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
        </p>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="text-3xl">‚è≥</div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏£‡∏ñ</p>
              <p className="text-2xl font-bold text-red-600">{stats.pendingRequests}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="text-3xl">üöó</div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</p>
              <p className="text-2xl font-bold text-blue-600">{stats.activeRides}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="text-3xl">üë®‚Äçüíº</div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô</p>
              <p className="text-2xl font-bold text-green-600">{stats.availableDrivers}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="text-3xl">‚úÖ</div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
              <p className="text-2xl font-bold text-gray-900">{stats.completedToday}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Pending Requests */}
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-medium text-gray-900">
            ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏ñ
          </h2>
        </div>
        
        <div className="divide-y divide-gray-200">
          {rides.filter(ride => ride.status === 'PENDING').map((ride) => (
            <div key={ride.id} className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-3">
                    <h3 className="text-lg font-medium text-gray-900">
                      {ride.patientName}
                    </h3>
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPriorityColor(ride.priority)}`}>
                      {getPriorityText(ride.priority)}
                    </span>
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(ride.status)}`}>
                      {getStatusText(ride.status)}
                    </span>
                  </div>
                  
                  <div className="mt-2 space-y-1">
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</span> {ride.requester}
                    </p>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö:</span> {ride.pickup}
                    </p>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢:</span> {ride.destination}
                    </p>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î:</span> {new Date(ride.appointmentTime).toLocaleString('th-TH')}
                    </p>
                  </div>
                </div>
                
                <div className="ml-6">
                  <div className="space-y-2">
                    <p className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö:</p>
                    {drivers.filter(driver => driver.status === 'AVAILABLE').map((driver) => (
                      <Button
                        key={driver.id}
                        onClick={() => handleAssignDriver(ride.id, driver.id)}
                        variant="outline"
                        size="sm"
                        className="w-full text-left justify-start"
                      >
                        {driver.name} ({driver.currentLocation})
                      </Button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {rides.filter(ride => ride.status === 'PENDING').length === 0 && (
          <div className="p-6 text-center text-gray-500">
            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏ñ
          </div>
        )}
      </div>

      {/* Active Rides */}
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-medium text-gray-900">
            ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
          </h2>
        </div>
        
        <div className="divide-y divide-gray-200">
          {rides.filter(ride => ride.status !== 'PENDING' && ride.status !== 'COMPLETED').map((ride) => (
            <div key={ride.id} className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-3">
                    <h3 className="text-lg font-medium text-gray-900">
                      {ride.patientName}
                    </h3>
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(ride.status)}`}>
                      {getStatusText(ride.status)}
                    </span>
                  </div>
                  
                  <div className="mt-2 space-y-1">
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö:</span> {ride.driverName}
                    </p>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö:</span> {ride.pickup}
                    </p>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢:</span> {ride.destination}
                    </p>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î:</span> {new Date(ride.appointmentTime).toLocaleString('th-TH')}
                    </p>
                  </div>
                </div>
                
                <div className="flex flex-col space-y-2 ml-6">
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-blue-600 hover:text-blue-700"
                  >
                    ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-green-600 hover:text-green-700"
                  >
                    ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {rides.filter(ride => ride.status !== 'PENDING' && ride.status !== 'COMPLETED').length === 0 && (
          <div className="p-6 text-center text-gray-500">
            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
          </div>
        )}
      </div>

      {/* Drivers Status */}
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-medium text-gray-900">
            ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ
          </h2>
        </div>
        
        <div className="divide-y divide-gray-200">
          {drivers.map((driver) => (
            <div key={driver.id} className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-3">
                    <h3 className="text-lg font-medium text-gray-900">
                      {driver.name}
                    </h3>
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getDriverStatusColor(driver.status)}`}>
                      {getDriverStatusText(driver.status)}
                    </span>
                  </div>
                  
                  <div className="mt-2 space-y-1">
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</span> {driver.phone}
                    </p>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</span> {driver.currentLocation}
                    </p>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:</span> ‚≠ê {driver.rating}/5.0
                    </p>
                  </div>
                </div>
                
                <div className="flex flex-col space-y-2 ml-6">
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-green-600 hover:text-green-700"
                  >
                    ‡πÇ‡∏ó‡∏£‡∏´‡∏≤
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-blue-600 hover:text-blue-700"
                  >
                    ‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

export default OfficeDashboard
